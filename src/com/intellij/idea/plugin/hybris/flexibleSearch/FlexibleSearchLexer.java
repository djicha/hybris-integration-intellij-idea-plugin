/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.flexibleSearch;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.*;
import static com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchParserDefinition.COMMENT;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>flexibleSearch.flex</tt>
 */
public class FlexibleSearchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SELECT_EXP = 2;
  public static final int FROM_EXP = 4;
  public static final int TABLE_IDENTIFIER = 6;
  public static final int COLUMN_IDENTIFIER = 8;
  public static final int LOCALIZATION = 10;
  public static final int WHERE_EXP = 12;
  public static final int ON_EXP = 14;
  public static final int CORRELATION_NAME = 16;
  public static final int SUB_QUERY = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15472 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21"+
    "\1\37\21\21\1\40\1\41\23\21\1\27\1\42\3\21\1\22\1\43\1\42\4\21\1\44\1\45\4"+
    "\0\1\46\1\47\1\27\3\21\2\50\1\27\1\51\1\52\1\0\1\53\5\21\1\54\2\0\1\5\1\55"+
    "\1\56\13\21\1\57\1\46\1\60\1\61\1\5\1\62\1\27\1\63\1\64\3\21\3\0\1\65\12\21"+
    "\1\66\1\0\1\67\1\27\1\5\1\70\3\21\1\54\1\71\1\20\2\21\1\66\1\72\1\73\1\74"+
    "\2\27\3\21\1\75\10\27\1\76\1\30\6\27\1\77\2\0\1\100\1\101\6\21\1\102\2\0\1"+
    "\103\1\21\1\104\1\5\2\42\1\105\1\106\1\107\2\21\1\76\1\110\1\111\1\112\1\113"+
    "\1\63\1\114\1\104\1\5\1\115\1\52\1\105\1\116\1\107\2\21\1\76\1\117\1\120\1"+
    "\121\1\122\1\123\1\124\1\125\1\5\1\126\1\27\1\105\1\37\1\36\2\21\1\76\1\127"+
    "\1\111\1\46\1\130\1\131\1\27\1\104\1\5\1\43\1\27\1\105\1\106\1\107\2\21\1"+
    "\76\1\127\1\111\1\112\1\122\1\132\1\114\1\104\1\5\1\43\1\27\1\133\1\134\1"+
    "\135\1\136\1\137\1\134\1\21\1\140\1\141\1\142\1\143\1\27\1\125\1\5\1\27\1"+
    "\43\1\105\1\32\1\76\2\21\1\76\1\144\1\145\1\146\1\142\1\147\1\26\1\104\1\5"+
    "\2\27\1\150\1\32\1\76\2\21\1\76\1\144\1\111\1\146\1\142\1\147\1\34\1\104\1"+
    "\5\1\151\1\27\1\150\1\32\1\76\4\21\1\152\1\146\1\153\1\63\1\27\1\104\1\5\1"+
    "\27\1\41\1\150\1\21\1\22\1\41\2\21\1\36\1\154\1\22\1\155\1\156\1\0\1\157\1"+
    "\160\1\161\1\27\1\42\5\21\1\162\1\163\1\164\1\100\1\5\1\165\4\27\1\166\1\167"+
    "\1\170\1\42\1\171\1\172\1\162\1\173\1\174\1\175\1\5\1\176\4\27\1\131\2\27"+
    "\1\177\1\5\1\165\1\200\1\201\1\21\1\42\3\21\1\30\1\45\1\0\1\146\1\202\1\0"+
    "\1\45\3\0\1\51\1\203\7\27\5\21\1\54\1\0\1\204\1\5\1\165\1\66\1\205\1\206\1"+
    "\207\1\210\1\21\1\211\1\212\1\5\1\213\4\21\1\37\1\17\5\21\1\214\51\21\1\135"+
    "\1\22\1\135\5\21\1\135\4\21\1\135\1\22\1\135\1\21\1\22\7\21\1\135\10\21\1"+
    "\215\4\27\2\21\2\27\12\21\1\30\1\27\1\42\114\21\1\106\2\21\1\216\2\21\1\50"+
    "\11\21\1\134\1\131\1\27\1\21\1\32\1\217\1\27\2\21\1\217\1\27\2\21\1\220\1"+
    "\27\1\21\1\32\1\221\1\27\6\21\1\222\3\0\1\223\1\224\1\5\1\165\3\27\1\225\1"+
    "\5\1\165\13\21\1\27\5\21\1\226\10\21\1\227\1\27\3\21\1\30\1\0\1\2\1\0\1\2"+
    "\1\125\1\5\3\21\1\227\1\30\1\27\5\21\1\115\2\0\1\56\1\177\1\5\1\165\4\27\2"+
    "\21\1\164\1\2\6\21\1\202\1\100\3\0\1\112\1\5\1\165\1\5\1\165\1\44\13\27\1"+
    "\230\5\21\1\222\1\0\1\230\1\115\1\5\1\165\1\27\1\231\1\2\1\27\1\232\3\21\1"+
    "\103\1\207\1\5\1\70\4\21\1\66\1\0\1\2\1\27\4\21\1\222\2\0\1\27\1\5\1\233\1"+
    "\5\1\70\3\21\1\227\12\27\1\234\2\0\1\235\1\236\1\27\30\21\4\0\1\100\2\27\1"+
    "\77\42\21\2\227\4\21\2\227\1\21\1\237\3\21\1\227\6\21\1\32\1\174\1\240\1\30"+
    "\1\241\1\115\1\21\1\30\1\240\1\30\1\242\1\243\3\27\1\244\1\27\1\44\1\131\1"+
    "\27\1\245\1\246\1\51\1\247\1\43\1\44\2\27\1\21\1\30\3\21\1\50\2\27\1\0\1\51"+
    "\1\250\1\0\1\251\1\27\1\252\1\41\1\154\1\253\1\31\1\254\1\21\1\255\1\256\1"+
    "\257\2\27\5\21\1\131\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\260\1\261\1\27"+
    "\4\21\1\37\1\17\7\21\1\44\1\27\1\63\2\21\1\22\1\27\10\22\4\0\5\27\1\44\72"+
    "\27\1\262\3\27\1\42\1\211\1\253\1\30\1\42\11\21\1\22\1\263\1\42\12\21\1\214"+
    "\1\256\4\21\1\227\1\42\12\21\1\22\2\27\3\21\1\50\6\27\170\21\1\227\11\27\71"+
    "\21\1\30\6\27\21\21\1\30\10\27\5\21\1\227\41\21\1\30\2\21\1\5\1\264\2\27\5"+
    "\21\1\164\1\77\1\265\3\21\1\63\12\21\1\177\3\27\1\44\1\21\1\41\14\21\1\266"+
    "\1\115\1\27\1\21\1\50\11\27\1\21\1\267\1\270\2\21\1\54\2\27\1\131\6\21\1\115"+
    "\1\27\1\271\5\21\1\222\1\0\1\51\1\27\1\5\1\165\2\0\1\271\1\52\1\5\1\70\2\21"+
    "\1\66\1\175\2\21\1\164\1\0\1\2\1\27\3\21\1\30\1\101\5\21\1\54\1\0\1\251\1"+
    "\44\1\5\1\165\2\27\1\160\1\272\5\21\1\103\1\100\1\27\1\270\1\273\1\5\1\165"+
    "\2\21\1\22\1\274\6\21\1\206\1\275\1\226\2\27\1\276\1\21\1\54\1\277\1\27\3"+
    "\300\1\27\2\22\22\27\4\21\1\54\1\301\1\5\1\165\64\21\1\115\1\27\2\21\1\22"+
    "\1\302\5\21\1\115\40\27\55\21\1\227\15\21\1\26\4\27\1\22\1\27\1\302\1\303"+
    "\1\21\1\76\1\22\1\174\1\304\15\21\1\26\3\27\1\302\54\21\1\227\2\27\10\21\1"+
    "\41\6\21\5\27\1\21\1\30\2\0\2\27\1\100\1\27\1\137\2\27\1\256\3\27\1\43\1\32"+
    "\20\21\1\305\1\245\1\27\1\5\1\165\1\42\2\21\1\116\1\42\2\21\1\50\1\306\12"+
    "\21\1\22\3\41\1\307\1\310\2\27\1\311\1\21\1\144\2\21\1\22\2\21\1\312\1\21"+
    "\1\227\1\21\1\227\4\27\17\21\1\50\10\27\6\21\1\30\20\27\1\313\20\27\3\21\1"+
    "\30\6\21\1\131\5\27\3\21\1\22\2\27\3\21\1\50\6\27\3\21\1\227\4\21\1\115\1"+
    "\21\1\253\5\27\23\21\1\227\1\5\1\165\52\27\1\227\1\76\4\21\1\37\1\314\2\21"+
    "\1\227\25\27\2\21\1\227\1\27\3\21\1\26\10\27\7\21\1\306\10\27\1\315\1\77\1"+
    "\144\1\42\2\21\1\115\1\121\4\27\3\21\1\30\20\27\6\21\1\227\1\27\2\21\1\227"+
    "\1\27\2\21\1\50\21\27\11\21\1\131\66\27\1\232\6\21\1\0\1\100\3\27\1\125\1"+
    "\5\2\27\1\232\5\21\1\0\1\316\2\27\3\21\1\131\1\5\1\165\1\232\3\21\1\164\1"+
    "\0\1\317\1\5\10\27\1\232\5\21\1\54\1\0\1\320\1\27\1\5\1\165\42\27\1\160\1"+
    "\272\72\27\1\160\1\272\56\27\1\160\1\272\4\27\5\21\1\54\1\0\1\27\1\5\1\165"+
    "\14\27\1\160\1\272\64\27\1\160\1\272\42\27\55\21\1\22\22\27\14\21\1\50\63"+
    "\27\5\21\1\22\72\27\7\21\1\131\4\27\1\160\1\272\34\27\1\160\1\272\64\27\10"+
    "\21\1\30\1\27\1\103\4\0\1\100\1\27\1\63\1\232\1\21\14\27\1\26\153\27\1\321"+
    "\1\322\2\0\1\323\1\2\3\27\1\324\22\27\1\325\67\27\12\21\1\32\10\21\1\32\1"+
    "\326\1\327\1\21\1\330\1\144\7\21\1\37\1\331\2\32\3\21\1\332\1\174\1\41\1\76"+
    "\51\21\1\227\3\21\1\76\2\21\1\214\3\21\1\214\2\21\1\32\3\21\1\32\2\21\1\22"+
    "\3\21\1\22\3\21\1\76\3\21\1\76\2\21\1\214\1\333\6\5\1\144\3\21\1\166\1\42"+
    "\1\214\1\334\1\252\1\335\1\166\1\237\1\166\2\214\1\124\1\21\1\36\1\21\1\115"+
    "\1\336\1\36\1\21\1\115\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\227"+
    "\74\27\1\123\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1784 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\2\1\11\1\3\2\11\1\3\6\2\4\0\1\11\1\26\2\0\1\1\2\0\1\5\1\17\1\20\1\21\1"+
    "\0\1\13\1\4\1\14\1\0\12\10\1\15\1\16\1\22\1\23\1\24\1\25\1\0\1\40\1\54\1\36"+
    "\1\41\1\34\1\55\1\47\1\57\1\42\1\62\1\60\1\35\1\50\1\43\1\44\1\61\1\1\1\52"+
    "\1\33\1\37\1\45\1\46\1\56\1\51\1\53\1\1\1\27\1\6\1\30\1\0\1\1\1\51\1\53\1"+
    "\1\1\31\1\0\1\32\1\0\6\2\1\12\2\2\1\11\1\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0"+
    "\1\1\5\0\17\1\1\0\2\42\15\1\1\33\2\1\4\0\4\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0"+
    "\5\1\1\0\2\1\2\0\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\13\1\1\0\3\1\1\0"+
    "\5\2\2\0\6\1\1\0\7\1\1\0\1\1\15\0\1\1\1\0\15\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\1\2\3\1\5\0\5\2\6\0\1\1\4\0\3\2\5\0\3\1\5\2\2\10\4\0\2\1\1\2\13\1\1\0\1\1"+
    "\7\2\2\1\2\2\1\0\4\2\2\1\2\10\3\1\2\0\1\1\7\0\1\2\1\1\1\2\6\1\3\2\2\0\11\1"+
    "\3\2\1\1\6\0\2\10\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1\3\2"+
    "\4\0\1\1\1\0\6\1\4\0\13\2\1\0\4\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0\2\10"+
    "\1\0\3\2\1\0\10\1\2\0\2\1\2\0\6\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2"+
    "\2\0\3\2\1\1\5\0\2\1\1\0\5\1\4\0\3\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1"+
    "\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\2\10\2\2\3\1\1\2\2"+
    "\0\1\1\1\0\2\1\1\0\3\1\2\2\1\0\3\2\2\0\1\1\15\0\2\2\2\0\1\2\1\1\1\0\6\1\3"+
    "\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0"+
    "\4\2\2\0\1\1\6\0\1\2\4\1\1\0\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\3\0\2\2\1\0\3"+
    "\1\1\0\2\1\5\0\3\1\2\0\1\1\3\2\1\0\4\2\1\1\1\0\4\1\1\0\1\1\4\0\1\2\4\0\6\2"+
    "\1\0\1\2\7\0\12\7\2\0\2\2\4\0\1\1\1\2\2\1\7\2\4\0\10\1\1\2\2\10\7\0\2\1\1"+
    "\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\3\1\2\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\2\10\2\0\4\1\2\2\13\0\1\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\5\1\3\2\6\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2"+
    "\1\7\2\3\1\4\2\5\1\14\2\1\1\1\2\2\10\4\2\2\0\3\1\1\0\7\1\2\0\3\2\1\11\11\1"+
    "\3\2\3\0\2\1\2\2\4\0\1\1\1\0\2\2\4\0\4\1\10\2\3\0\1\1\3\0\2\1\1\2\5\0\3\2"+
    "\2\0\1\1\1\2\1\1\5\0\6\1\2\0\5\2\3\1\3\0\10\2\5\1\2\10\3\0\3\1\3\2\1\0\5\2"+
    "\4\1\1\2\4\1\3\2\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2"+
    "\1\13\11\5\2\2\11\5\2\1\11\4\0\1\1\12\0\1\11\2\0\6\2\1\0\1\2\3\0\4\2\11\0"+
    "\1\1\4\0\1\1\1\0\5\1\2\0\1\1\1\0\1\60\3\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\4\0\4\1\3\2\2\1\4\0\1\11\4\0\3\1\1\0\2\2\2\0\3\1\2\10\2\1\4\0\6\2\1\0\2\1"+
    "\2\0\4\1\1\0\2\1\1\2\3\1\1\2\4\1\1\2\4\1\2\2\6\1\2\7\6\0\4\1\2\2\4\0\1\1\1"+
    "\2\4\0\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5\1\5\0"+
    "\1\1\1\2\3\1\1\0\2\1\1\0\7\1\2\0\1\2\6\0\2\1\2\0\3\1\3\0\2\1\3\0\2\1\2\0\3"+
    "\2\4\0\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\1\1\3\0\1\1\2\0\2\1\3\2\1\0\2\2\1\0"+
    "\3\2\2\0\1\2\2\0\5\2\1\0\2\10\1\2\4\1\10\0\5\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0"+
    "\3\2\5\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1\0\6\1\2\0\5\1\1\0\4\1\1\0\4"+
    "\1\2\0\2\10\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\20\2\1\20\1\21\1\17\12\20\1\22\1\23"+
    "\1\24\13\2\1\25\1\26\1\27\2\25\1\30\1\31"+
    "\1\32\1\30\1\33\1\34\1\20\1\35\1\36\1\37"+
    "\1\40\1\17\15\20\1\41\1\2\2\42\2\1\1\43"+
    "\2\4\1\44\1\45\11\2\1\46\5\2\1\47\1\50"+
    "\2\2\1\51\1\52\5\2\1\53\4\2\1\54\6\20"+
    "\1\55\4\20\1\47\2\20\1\53\1\20\1\56\3\2"+
    "\1\57\1\2\1\52\2\2\1\60\1\25\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\12\20"+
    "\1\47\1\50\2\20\1\52\2\20\1\53\2\20\1\2"+
    "\1\72\1\73\1\0\2\2\1\74\7\2\1\75\1\76"+
    "\1\77\1\100\1\101\2\2\1\102\4\2\1\103\1\104"+
    "\5\2\2\20\1\74\4\20\1\76\1\100\1\101\1\20"+
    "\1\103\1\104\1\20\4\2\1\25\7\20\1\75\1\77"+
    "\1\20\1\102\6\20\1\2\1\0\1\2\1\105\2\2"+
    "\1\106\1\107\2\2\1\110\1\111\1\2\1\112\6\2"+
    "\1\113\1\2\1\20\1\105\1\20\1\114\3\20\1\115"+
    "\1\2\1\116\1\2\1\117\1\120\2\20\1\121\1\106"+
    "\1\107\1\20\1\110\1\111\1\112\5\20\1\120\1\0"+
    "\1\2\1\122\2\2\1\123\1\2\1\124\1\125\1\126"+
    "\1\2\1\127\1\130\1\131\1\20\1\122\1\20\1\123"+
    "\1\20\1\2\1\132\3\20\1\124\1\126\1\20\1\127"+
    "\1\130\1\0\1\133\1\134\1\135\2\2\1\136\1\135"+
    "\1\20\1\137\1\140\1\134\1\135\1\20\1\141\1\2"+
    "\1\142\1\20\1\142\2\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u01fe\0\u01fe\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u01fe"+
    "\0\u01fe\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u01fe\0\u01fe"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u01fe\0\u01fe\0\u0c27\0\u01fe\0\u01fe"+
    "\0\u0c5a\0\u0c8d\0\u01fe\0\u0cc0\0\u0330\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u01fe\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u01fe\0\u10ef\0\u01fe\0\u01fe\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u0231\0\u0231\0\u141f"+
    "\0\u1452\0\u0231\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u0231\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u01fe\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u06c6\0\u17b5\0\u17e8\0\u181b"+
    "\0\u184e\0\u06c6\0\u1881\0\u18b4\0\u06c6\0\u18e7\0\u01fe\0\u191a"+
    "\0\u194d\0\u1980\0\u0231\0\u19b3\0\u0231\0\u19e6\0\u1a19\0\u01fe"+
    "\0\u1a4c\0\u0b5b\0\u01fe\0\u01fe\0\u0bf4\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u01fe\0\u01fe\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u0c5a\0\u0c5a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u0c5a\0\u1d7c\0\u1daf\0\u1de2\0\u0ff0"+
    "\0\u01fe\0\u1e15\0\u1e48\0\u1e7b\0\u0231\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u0231\0\u0231\0\u0231\0\u0231"+
    "\0\u0231\0\u2013\0\u2046\0\u0231\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\u0231\0\u0231\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u06c6\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u06c6\0\u06c6"+
    "\0\u06c6\0\u2376\0\u06c6\0\u06c6\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da"+
    "\0\u260d\0\u0c5a\0\u0c5a\0\u2640\0\u0c5a\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u0231\0\u283e"+
    "\0\u2871\0\u0231\0\u0231\0\u28a4\0\u28d7\0\u0231\0\u0231\0\u290a"+
    "\0\u0231\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u0231"+
    "\0\u2a6f\0\u2aa2\0\u06c6\0\u2ad5\0\u06c6\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u06c6\0\u2ba1\0\u0231\0\u2bd4\0\u0231\0\u0b5b\0\u2c07\0\u2c3a"+
    "\0\u0c5a\0\u0c5a\0\u0c5a\0\u2c6d\0\u0c5a\0\u0c5a\0\u0c5a\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u0231\0\u2d9f\0\u2dd2\0\u0231"+
    "\0\u2e05\0\u2e38\0\u0231\0\u2e6b\0\u0231\0\u0231\0\u0231\0\u2e9e"+
    "\0\u0231\0\u0231\0\u0231\0\u2ed1\0\u06c6\0\u2f04\0\u06c6\0\u2f37"+
    "\0\u2f6a\0\u0231\0\u2f9d\0\u2fd0\0\u3003\0\u0c5a\0\u0c5a\0\u3036"+
    "\0\u0c5a\0\u0c5a\0\u3069\0\u0231\0\u0231\0\u0231\0\u309c\0\u30cf"+
    "\0\u06c6\0\u06c6\0\u3102\0\u0231\0\u0c5a\0\u0c5a\0\u0c5a\0\u3135"+
    "\0\u01fe\0\u3168\0\u0231\0\u319b\0\u0c5a\0\u0231\0\u06c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\13\1\15\1\16\1\17\1\13\2\20"+
    "\2\15\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\5\13\2\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\14"+
    "\1\46\1\47\3\14\1\50\1\51\1\52\4\14\1\13"+
    "\1\53\1\13\1\15\1\16\1\17\1\13\2\20\2\15"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\7\13"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\62"+
    "\1\63\1\64\5\53\1\65\3\53\1\66\1\67\5\53"+
    "\1\13\1\14\1\13\1\15\1\16\1\17\1\13\2\20"+
    "\2\15\1\21\1\22\1\23\1\24\1\25\1\26\4\13"+
    "\1\70\1\71\2\13\1\72\1\32\1\73\1\74\1\75"+
    "\1\76\1\37\1\77\1\14\1\100\1\43\1\101\1\45"+
    "\1\14\1\46\4\14\1\102\1\103\1\104\3\14\1\105"+
    "\1\13\1\106\1\13\1\15\1\16\4\13\2\15\1\107"+
    "\11\13\1\70\1\71\3\13\1\110\2\106\1\111\2\106"+
    "\1\112\22\106\1\13\1\113\1\13\1\15\1\16\4\13"+
    "\2\15\1\107\1\22\1\23\1\24\1\13\1\114\1\27"+
    "\1\13\1\115\6\13\1\110\5\113\1\116\22\113\1\13"+
    "\1\14\1\13\1\15\1\16\4\13\2\15\14\13\1\117"+
    "\1\120\2\13\30\14\1\13\1\121\1\13\1\15\1\16"+
    "\1\17\1\13\2\20\2\15\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\13\1\122\1\123\1\124\1\70\1\71"+
    "\2\13\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\2\121\1\141\4\121"+
    "\1\142\1\143\5\121\1\13\1\14\1\13\1\15\1\16"+
    "\2\13\2\20\2\15\16\13\1\144\1\110\2\14\1\145"+
    "\25\14\1\13\1\146\1\13\1\15\1\16\4\13\2\15"+
    "\20\13\5\146\1\147\22\146\3\13\1\15\1\16\4\13"+
    "\2\15\17\13\1\150\1\151\27\13\64\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\30\14\3\0\1\15\5\0"+
    "\2\15\54\0\1\152\56\0\3\17\1\0\1\17\1\153"+
    "\1\154\54\17\7\0\2\20\103\0\1\155\63\0\1\156"+
    "\31\0\2\14\5\0\1\14\1\0\1\14\20\0\1\14"+
    "\1\157\7\14\1\160\1\161\15\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\13\14\1\162\2\14\1\163"+
    "\11\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\5\14\1\164\1\14\1\165\20\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\11\14\1\166\16\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\17\14\1\167"+
    "\10\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\1\170\1\14\1\171\5\14\1\172\2\14\1\173\14\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\1\14"+
    "\1\174\5\14\1\175\20\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\1\176\7\14\1\177\17\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\11\14\1\200"+
    "\1\201\15\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\10\14\1\202\6\14\1\203\10\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\10\14\1\204\17\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\17\14"+
    "\1\205\10\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\5\14\1\206\1\14\1\207\20\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\1\14\1\210\16\14"+
    "\1\211\7\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\5\14\1\212\1\14\1\213\7\14\1\214\10\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\24\14"+
    "\1\215\3\14\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\30\53\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\1\53\1\217\7\53"+
    "\1\220\1\221\15\53\1\0\2\53\5\0\1\53\1\0"+
    "\1\53\1\0\1\216\16\0\13\53\1\222\14\53\1\0"+
    "\2\53\5\0\1\53\1\0\1\53\1\0\1\216\16\0"+
    "\1\53\1\223\26\53\1\0\2\53\5\0\1\53\1\0"+
    "\1\53\1\0\1\216\16\0\11\53\1\224\16\53\1\0"+
    "\2\53\5\0\1\53\1\0\1\53\1\0\1\216\16\0"+
    "\1\225\1\53\1\226\5\53\1\227\2\53\1\230\14\53"+
    "\1\0\2\53\5\0\1\53\1\0\1\53\1\0\1\216"+
    "\16\0\7\53\1\231\20\53\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\1\232\27\53\1\0"+
    "\2\53\5\0\1\53\1\0\1\53\1\0\1\216\16\0"+
    "\5\53\1\233\1\53\1\234\20\53\1\0\2\53\5\0"+
    "\1\53\1\0\1\53\1\0\1\216\16\0\20\53\1\235"+
    "\7\53\1\0\2\53\5\0\1\53\1\0\1\53\1\0"+
    "\1\216\16\0\17\53\1\236\10\53\31\0\1\237\32\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\1\14\1\240"+
    "\26\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\16\14\1\163\11\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\1\14\1\241\5\14\1\165\20\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\11\14\1\242"+
    "\16\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\1\243\1\14\1\171\5\14\1\244\17\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\1\176\27\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\10\14\1\202"+
    "\6\14\1\245\10\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\1\14\1\210\26\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\5\14\1\212\22\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\24\14\1\246"+
    "\3\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\11\14\1\247\16\14\1\0\2\106\5\0\1\106\1\0"+
    "\1\106\1\0\2\250\15\0\30\106\1\0\2\106\5\0"+
    "\1\106\1\0\1\106\1\0\2\250\15\0\1\106\1\251"+
    "\26\106\1\0\2\106\5\0\1\106\1\0\1\106\1\0"+
    "\2\250\15\0\1\252\27\106\1\0\2\113\5\0\1\113"+
    "\1\0\1\113\1\0\2\253\11\0\1\254\3\0\30\113"+
    "\1\0\2\113\5\0\1\113\1\0\1\113\1\0\2\253"+
    "\11\0\1\254\3\0\1\255\27\113\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\30\121\23\0"+
    "\1\257\1\260\61\0\1\261\71\0\1\262\31\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\1\121"+
    "\1\263\26\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\16\121\1\264\11\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\1\121"+
    "\1\265\3\121\1\266\1\121\1\267\20\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\11\121"+
    "\1\270\16\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\17\121\1\271\10\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\1\272"+
    "\7\121\1\273\17\121\1\0\2\121\5\0\1\121\1\0"+
    "\1\121\1\0\1\256\16\0\1\121\1\274\26\121\1\0"+
    "\2\121\5\0\1\121\1\0\1\121\1\0\1\256\16\0"+
    "\1\275\7\121\1\276\17\121\1\0\2\121\5\0\1\121"+
    "\1\0\1\121\1\0\1\256\16\0\11\121\1\277\1\300"+
    "\15\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\17\121\1\301\10\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\17\121\1\302"+
    "\10\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\1\121\1\303\16\121\1\304\7\121\1\0"+
    "\2\121\5\0\1\121\1\0\1\121\1\0\1\256\16\0"+
    "\5\121\1\305\1\121\1\306\20\121\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\1\14\1\307\26\14\1\0"+
    "\2\146\5\0\1\146\1\0\1\146\20\0\30\146\1\0"+
    "\2\146\5\0\1\146\1\0\1\146\20\0\1\310\27\146"+
    "\32\0\1\311\64\0\1\312\26\0\3\152\1\0\57\152"+
    "\3\17\1\0\57\17\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\2\14\1\313\25\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\15\14\1\314\12\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\15\14\1\315"+
    "\12\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\1\14\1\316\26\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\7\14\1\317\20\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\1\320\27\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\25\14\1\321\2\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\10\14"+
    "\1\322\1\14\1\323\15\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\12\14\1\324\15\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\3\14\1\325\24\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\2\14"+
    "\1\326\25\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\6\14\1\327\11\14\1\330\7\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\14\14\1\331\13\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\1\332"+
    "\27\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\1\333\27\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\4\14\1\334\23\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\2\14\1\335\25\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\6\14\1\336\21\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\7\14"+
    "\1\337\20\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\11\14\1\340\16\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\16\14\1\341\11\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\10\14\1\342\17\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\4\14"+
    "\1\343\23\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\2\14\1\344\25\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\17\14\1\345\10\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\11\14\1\346\16\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\1\14"+
    "\1\347\26\14\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\2\53\1\350\25\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\15\53"+
    "\1\351\12\53\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\15\53\1\352\12\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\1\53"+
    "\1\353\26\53\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\22\53\1\354\5\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\10\53"+
    "\1\355\1\53\1\356\15\53\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\2\53\1\357\25\53"+
    "\1\0\2\53\5\0\1\53\1\0\1\53\1\0\1\216"+
    "\16\0\20\53\1\360\7\53\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\14\53\1\361\13\53"+
    "\1\0\2\53\5\0\1\53\1\0\1\53\1\0\1\216"+
    "\16\0\1\362\27\53\1\0\2\53\5\0\1\53\1\0"+
    "\1\53\1\0\1\216\16\0\16\53\1\363\11\53\1\0"+
    "\2\53\5\0\1\53\1\0\1\53\1\0\1\216\16\0"+
    "\10\53\1\364\17\53\1\0\2\53\5\0\1\53\1\0"+
    "\1\53\1\0\1\216\16\0\11\53\1\365\16\53\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\2\14\1\366"+
    "\25\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\22\14\1\367\5\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\10\14\1\322\17\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\6\14\1\327\21\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\1\14\1\370"+
    "\26\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\7\14\1\371\20\14\1\0\2\106\5\0\1\106\1\0"+
    "\1\106\1\0\2\250\15\0\22\106\1\372\5\106\1\0"+
    "\2\121\5\0\1\121\1\0\1\121\1\0\1\256\16\0"+
    "\2\121\1\373\25\121\1\0\2\121\5\0\1\121\1\0"+
    "\1\121\1\0\1\256\16\0\7\121\1\374\20\121\1\0"+
    "\2\121\5\0\1\121\1\0\1\121\1\0\1\256\16\0"+
    "\22\121\1\375\5\121\1\0\2\121\5\0\1\121\1\0"+
    "\1\121\1\0\1\256\16\0\1\376\27\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\25\121"+
    "\1\377\2\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\10\121\1\u0100\17\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\12\121"+
    "\1\u0101\15\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\3\121\1\u0102\24\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\6\121"+
    "\1\u0103\21\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\1\u0104\27\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\4\121\1\u0105"+
    "\23\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\2\121\1\u0106\25\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\6\121\1\u0107"+
    "\21\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\11\121\1\u0108\16\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\4\121\1\u0109"+
    "\23\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\2\121\1\u010a\25\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\17\121\1\u010b"+
    "\10\121\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\22\14\1\u010c\5\14\35\0\1\u010d\26\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\1\14\1\u010e\26\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\1\14\1\u010f"+
    "\26\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\17\14\1\u0110\10\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\1\u0111\27\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\4\14\1\u0112\23\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\1\14\1\u0113\26\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\3\14"+
    "\1\u0114\24\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\10\14\1\u0115\17\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\1\14\1\u0116\26\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\3\14\1\u0117\24\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\4\14"+
    "\1\u0118\23\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\2\14\1\u0119\25\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\1\14\1\u011a\26\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\11\14\1\u011b\16\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\12\14"+
    "\1\u011c\15\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\23\14\1\u011d\4\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\1\u011e\27\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\1\u011f\27\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\15\14\1\u0120\12\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\17\14"+
    "\1\u0121\10\14\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\1\53\1\u0122\26\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\1\53"+
    "\1\u0123\26\53\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\17\53\1\u0124\10\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\4\53"+
    "\1\u0125\23\53\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\3\53\1\u0126\24\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\10\53"+
    "\1\u0127\17\53\1\0\2\53\5\0\1\53\1\0\1\53"+
    "\1\0\1\216\16\0\4\53\1\u0128\23\53\1\0\2\53"+
    "\5\0\1\53\1\0\1\53\1\0\1\216\16\0\15\53"+
    "\1\u0129\12\53\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\1\14\1\u012a\26\14\1\0\2\14\5\0\1\14"+
    "\1\0\1\14\20\0\4\14\1\u012b\23\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\17\14\1\u012c\10\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\10\14"+
    "\1\u012d\17\14\1\0\2\106\5\0\1\106\1\0\1\106"+
    "\1\0\2\250\15\0\4\106\1\u012e\23\106\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\1\121"+
    "\1\u012f\26\121\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\1\u0130\27\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\4\121\1\u0131"+
    "\23\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\4\121\1\u0132\23\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\1\121\1\u0133"+
    "\26\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\3\121\1\u0134\24\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\1\121\1\u0135"+
    "\26\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\3\121\1\u0136\24\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\2\121\1\u0137"+
    "\25\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\1\121\1\u0138\26\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\12\121\1\u0139"+
    "\15\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\23\121\1\u013a\4\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\1\u013b\27\121"+
    "\1\0\2\121\5\0\1\121\1\0\1\121\1\0\1\256"+
    "\16\0\1\u013c\27\121\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\4\14\1\u013d\23\14\34\0\1\u013e\27\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\3\14\1\u013f"+
    "\24\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\20\14\1\u0140\7\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\4\14\1\u0141\23\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\5\14\1\u0142\22\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\4\14\1\u0143"+
    "\23\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\7\14\1\u0144\20\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\17\14\1\u0145\10\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\10\14\1\u0146\17\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\26\14\1\u0147"+
    "\1\14\1\0\2\14\5\0\1\14\1\0\1\14\20\0"+
    "\1\14\1\u0148\26\14\1\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\1\14\1\u0149\26\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\4\14\1\u014a\23\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\1\14\1\u014b"+
    "\26\14\1\0\2\53\5\0\1\53\1\0\1\53\1\0"+
    "\1\216\16\0\3\53\1\u014c\24\53\1\0\2\53\5\0"+
    "\1\53\1\0\1\53\1\0\1\216\16\0\20\53\1\u014d"+
    "\7\53\1\0\2\53\5\0\1\53\1\0\1\53\1\0"+
    "\1\216\16\0\5\53\1\u014e\22\53\1\0\2\53\5\0"+
    "\1\53\1\0\1\53\1\0\1\216\16\0\4\53\1\u014f"+
    "\23\53\1\0\2\53\5\0\1\53\1\0\1\53\1\0"+
    "\1\216\16\0\7\53\1\u0150\20\53\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\3\14\1\u0151\24\14\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\1\14\1\u0152"+
    "\26\14\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\3\121\1\u0153\24\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\4\121\1\u0154"+
    "\23\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\5\121\1\u0155\22\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\17\121\1\u0156"+
    "\10\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\26\121\1\u0157\1\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\1\121\1\u0158"+
    "\26\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\1\121\1\u0159\26\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\4\121\1\u015a"+
    "\23\121\36\0\1\u015b\25\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\4\14\1\u015c\23\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\1\u015d\27\14\1\0\2\14"+
    "\5\0\1\14\1\0\1\14\20\0\4\14\1\u015e\23\14"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\10\14"+
    "\1\u015f\17\14\1\0\2\14\5\0\1\14\1\0\1\14"+
    "\20\0\1\14\1\u0160\26\14\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\4\53\1\u0161\23\53"+
    "\1\0\2\53\5\0\1\53\1\0\1\53\1\0\1\216"+
    "\16\0\4\53\1\u0162\23\53\1\0\2\53\5\0\1\53"+
    "\1\0\1\53\1\0\1\216\16\0\10\53\1\u0163\17\53"+
    "\1\0\2\14\5\0\1\14\1\0\1\14\20\0\4\14"+
    "\1\u0164\23\14\1\0\2\121\5\0\1\121\1\0\1\121"+
    "\1\0\1\256\16\0\4\121\1\u0165\23\121\1\0\2\121"+
    "\5\0\1\121\1\0\1\121\1\0\1\256\16\0\1\u0166"+
    "\27\121\1\0\2\121\5\0\1\121\1\0\1\121\1\0"+
    "\1\256\16\0\4\121\1\u0167\23\121\1\0\2\121\5\0"+
    "\1\121\1\0\1\121\1\0\1\256\16\0\1\121\1\u0168"+
    "\26\121\37\0\1\u0169\24\0\2\14\5\0\1\14\1\0"+
    "\1\14\20\0\3\14\1\u016a\24\14\1\0\2\14\5\0"+
    "\1\14\1\0\1\14\20\0\10\14\1\u016b\17\14\1\0"+
    "\2\53\5\0\1\53\1\0\1\53\1\0\1\216\16\0"+
    "\3\53\1\u016c\24\53\1\0\2\121\5\0\1\121\1\0"+
    "\1\121\1\0\1\256\16\0\10\121\1\u016d\17\121\1\0"+
    "\2\14\5\0\1\14\1\0\1\14\20\0\4\14\1\u016e"+
    "\23\14\1\0\2\53\5\0\1\53\1\0\1\53\1\0"+
    "\1\216\16\0\4\53\1\u016f\23\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\5\1\10\11\23\1\2\11\12\1\2\11"+
    "\15\1\2\11\3\1\2\11\1\1\2\11\2\1\1\11"+
    "\20\1\1\11\6\1\1\11\1\1\2\11\37\1\1\11"+
    "\20\1\1\11\10\1\1\11\2\1\2\11\1\1\5\11"+
    "\26\1\1\11\1\0\102\1\1\0\60\1\1\0\34\1"+
    "\1\0\15\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int myPrevState = YYINITIAL;
    
    public int yyprevstate() {
        return myPrevState;
    }
    
    private int popState() {
        final int prev = myPrevState;
        myPrevState = YYINITIAL;
        return prev;
    }
    
    protected void pushState(int state){
        myPrevState = state;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FlexibleSearchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 100: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 101: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 102: break;
          case 4: 
            { return STRING;
            }
          case 103: break;
          case 5: 
            { return NUMBER;
            }
          case 104: break;
          case 6: 
            { return COMMA;
            }
          case 105: break;
          case 7: 
            { return DOT;
            }
          case 106: break;
          case 8: 
            { return COLON;
            }
          case 107: break;
          case 9: 
            { return SEMICOLON;
            }
          case 108: break;
          case 10: 
            { return LEFT_PAREN;
            }
          case 109: break;
          case 11: 
            { return RIGHT_PAREN;
            }
          case 110: break;
          case 12: 
            { return ASTERISK;
            }
          case 111: break;
          case 13: 
            { return RIGHT_BRACKET;
            }
          case 112: break;
          case 14: 
            { return LEFT_BRACE;
            }
          case 113: break;
          case 15: 
            { return RIGHT_BRACE;
            }
          case 114: break;
          case 16: 
            { return COLUMN_REFERENCE_IDENTIFIER;
            }
          case 115: break;
          case 17: 
            { yybegin(COLUMN_IDENTIFIER); pushState(SELECT_EXP); return LEFT_BRACE;
            }
          case 116: break;
          case 18: 
            { return QUESTION_MARK;
            }
          case 117: break;
          case 19: 
            { return EXCLAMATION_MARK;
            }
          case 118: break;
          case 20: 
            { yybegin(TABLE_IDENTIFIER); pushState(FROM_EXP); return LEFT_BRACE;
            }
          case 119: break;
          case 21: 
            { yybegin(popState()); return TABLE_NAME_IDENTIFIER;
            }
          case 120: break;
          case 22: 
            { yybegin(popState()); return COMMA;
            }
          case 121: break;
          case 23: 
            { yybegin(popState()); return RIGHT_BRACE;
            }
          case 122: break;
          case 24: 
            { yybegin(popState()); return COLUMN_REFERENCE_IDENTIFIER;
            }
          case 123: break;
          case 25: 
            { yybegin(popState()); return RIGHT_PAREN;
            }
          case 124: break;
          case 26: 
            { yybegin(popState()); return EQUALS_OPERATOR;
            }
          case 125: break;
          case 27: 
            { return LEFT_BRACKET;
            }
          case 126: break;
          case 28: 
            { yybegin(COLUMN_IDENTIFIER); return RIGHT_BRACKET;
            }
          case 127: break;
          case 29: 
            { return LESS_THAN_OPERATOR;
            }
          case 128: break;
          case 30: 
            { return EQUALS_OPERATOR;
            }
          case 129: break;
          case 31: 
            { return GREATER_THAN_OPERATOR;
            }
          case 130: break;
          case 32: 
            { yybegin(COLUMN_IDENTIFIER); pushState(WHERE_EXP); return LEFT_BRACE;
            }
          case 131: break;
          case 33: 
            { yybegin(COLUMN_IDENTIFIER); return LEFT_BRACE;
            }
          case 132: break;
          case 34: 
            { yybegin(popState()); return IDENTIFIER;
            }
          case 133: break;
          case 35: 
            { return COMMENT;
            }
          case 134: break;
          case 36: 
            { return LEFT_DOUBLE_BRACE;
            }
          case 135: break;
          case 37: 
            { return RIGHT_DOUBLE_BRACE;
            }
          case 136: break;
          case 38: 
            { yybegin(CORRELATION_NAME);return AS;
            }
          case 137: break;
          case 39: 
            { return IS;
            }
          case 138: break;
          case 40: 
            { return IN;
            }
          case 139: break;
          case 41: 
            { yybegin(ON_EXP); pushState(FROM_EXP); return ON;
            }
          case 140: break;
          case 42: 
            { return OR;
            }
          case 141: break;
          case 43: 
            { return BY;
            }
          case 142: break;
          case 44: 
            { yypushback(yylength()); yybegin(COLUMN_IDENTIFIER); pushState(SELECT_EXP);
            }
          case 143: break;
          case 45: 
            { yybegin(CORRELATION_NAME); pushState(SELECT_EXP); return AS;
            }
          case 144: break;
          case 46: 
            { yybegin(SUB_QUERY); pushState(FROM_EXP); return LEFT_DOUBLE_BRACE;
            }
          case 145: break;
          case 47: 
            { yybegin(CORRELATION_NAME); pushState(FROM_EXP); return AS;
            }
          case 146: break;
          case 48: 
            { yypushback(1); yybegin(COLUMN_IDENTIFIER); return TABLE_NAME_IDENTIFIER;
            }
          case 147: break;
          case 49: 
            { yybegin(CORRELATION_NAME); pushState(TABLE_IDENTIFIER); return AS;
            }
          case 148: break;
          case 50: 
            { yypushback(yylength()); yybegin(TABLE_IDENTIFIER);
            }
          case 149: break;
          case 51: 
            { yypushback(1); yybegin(LOCALIZATION); return COLUMN_REFERENCE_IDENTIFIER;
            }
          case 150: break;
          case 52: 
            { yybegin(CORRELATION_NAME); pushState(COLUMN_IDENTIFIER); return AS;
            }
          case 151: break;
          case 53: 
            { yypushback(yylength()); yybegin(COLUMN_IDENTIFIER); pushState(WHERE_EXP);
            }
          case 152: break;
          case 54: 
            { return LESS_THAN_OR_EQUALS_OPERATOR;
            }
          case 153: break;
          case 55: 
            { return NOT_EQUALS_OPERATOR;
            }
          case 154: break;
          case 56: 
            { return GREATER_THAN_OR_EQUALS_OPERATOR;
            }
          case 155: break;
          case 57: 
            { yybegin(popState()); return RIGHT_DOUBLE_BRACE;
            }
          case 156: break;
          case 58: 
            { return AS;
            }
          case 157: break;
          case 59: 
            { yybegin(FROM_EXP); return RIGHT_DOUBLE_BRACE;
            }
          case 158: break;
          case 60: 
            { return SUM;
            }
          case 159: break;
          case 61: 
            { return ASC;
            }
          case 160: break;
          case 62: 
            { return ALL;
            }
          case 161: break;
          case 63: 
            { return AND;
            }
          case 162: break;
          case 64: 
            { return ANY;
            }
          case 163: break;
          case 65: 
            { return AVG;
            }
          case 164: break;
          case 66: 
            { return NOT;
            }
          case 165: break;
          case 67: 
            { return MAX;
            }
          case 166: break;
          case 68: 
            { return MIN;
            }
          case 167: break;
          case 69: 
            { return SOME;
            }
          case 168: break;
          case 70: 
            { return LAST;
            }
          case 169: break;
          case 71: 
            { return LIKE;
            }
          case 170: break;
          case 72: 
            { return TRUE;
            }
          case 171: break;
          case 73: 
            { return DESC;
            }
          case 172: break;
          case 74: 
            { return NULL;
            }
          case 173: break;
          case 75: 
            { yybegin(FROM_EXP); return FROM;
            }
          case 174: break;
          case 76: 
            { yybegin(popState()); return LEFT;
            }
          case 175: break;
          case 77: 
            { yybegin(FROM_EXP); pushState(SELECT_EXP); return FROM;
            }
          case 176: break;
          case 78: 
            { return LEFT;
            }
          case 177: break;
          case 79: 
            { yybegin(TABLE_IDENTIFIER); pushState(FROM_EXP); return JOIN;
            }
          case 178: break;
          case 80: 
            { yybegin(FROM_EXP); return LEFT;
            }
          case 179: break;
          case 81: 
            { yybegin(FROM_EXP); pushState(WHERE_EXP); return LEFT;
            }
          case 180: break;
          case 82: 
            { return EVERY;
            }
          case 181: break;
          case 83: 
            { return COUNT;
            }
          case 182: break;
          case 84: 
            { return ORDER;
            }
          case 183: break;
          case 85: 
            { return UNION;
            }
          case 184: break;
          case 86: 
            { return GROUP;
            }
          case 185: break;
          case 87: 
            { return FALSE;
            }
          case 186: break;
          case 88: 
            { return FIRST;
            }
          case 187: break;
          case 89: 
            { yybegin(WHERE_EXP); return WHERE;
            }
          case 188: break;
          case 90: 
            { yybegin(WHERE_EXP); pushState(FROM_EXP); return WHERE;
            }
          case 189: break;
          case 91: 
            { yybegin(SELECT_EXP); pushState(YYINITIAL); return SELECT;
            }
          case 190: break;
          case 92: 
            { return EXISTS;
            }
          case 191: break;
          case 93: 
            { return CONCAT;
            }
          case 192: break;
          case 94: 
            { return SELECT;
            }
          case 193: break;
          case 95: 
            { yybegin(SELECT_EXP); pushState(FROM_EXP); return SELECT;
            }
          case 194: break;
          case 96: 
            { yybegin(SELECT_EXP); pushState(WHERE_EXP); return SELECT;
            }
          case 195: break;
          case 97: 
            { yybegin(SELECT_EXP); pushState(SUB_QUERY); return SELECT;
            }
          case 196: break;
          case 98: 
            { return BETWEEN;
            }
          case 197: break;
          case 99: 
            { return DISTINCT;
            }
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
